angular.module("app",["ui.router","ui.bootstrap","userControllers","mainControllers","emailControllers"]).config(["$httpProvider",function(e){e.interceptors.push("AuthInterceptors")}]);var app=angular.module("app");app.config(["$stateProvider","$urlRouterProvider","$locationProvider",function(e,t,r){t.otherwise("/"),r.hashPrefix(""),r.html5Mode(!0),e.state("app",{url:"/",views:{header:{templateUrl:"/menues/mainMenu.html",controller:"mainMenuController"},content:{templateUrl:"/main/home.html"},footer:{templateUrl:"/company/footer.html"}}}).state("registerStep1",{url:"/register/step1",controller:"regCtrl",controllerAs:"register",templateUrl:"/users/register/registerStep1.html",authenticated:!1}).state("registerStep2",{url:"/register/step2",controller:"regCtrl",controllerAs:"register",templateUrl:"/users/register/registerStep2.html",authenticated:!1}).state("resetusername",{url:"/resetusername",templateUrl:"/users/reset/username.html",controller:"usernameCtrl",controllerAs:"username"}).state("resetpassword",{url:"/resetpassword",templateUrl:"/users/reset/password.html",controller:"passwordCtrl",controllerAs:"password"}).state("reset",{url:"/reset/:token",templateUrl:"/users/reset/newpassword.html",controller:"resetCtrl",controllerAs:"reset"}).state("activate",{url:"/activate/:token",templateUrl:"/users/activation/activate.html",controller:"emailCtrl",controllerAs:"email"}).state("resend",{url:"/resend",templateUrl:"/users/activation/resend.html",controller:"resendCtrl",controllerAs:"resend"}).state("app.intro",{url:"intro",views:{"content@":{templateUrl:"/company/intro.html",authenticated:!1}}}).state("app.terms",{url:"terms",views:{"content@":{templateUrl:"/company/terms.html",authenticated:!1}}}).state("app.privacy",{url:"privacy",views:{"content@":{templateUrl:"/company/privacy.html",authenticated:!1}}})}]),app.run(["$rootScope","User","$state",function(e,t,r){e.$on("$stateChangeStart",function(e,t,r,s,a,o){}),e.$on("$stateChangeError",function(e,t,s,a,o,n){r.go("app")})}]),angular.module("app").directive("match",function(){return{restrict:"A",controller:["$scope",function(e){e.doConfirm=function(t){e.confirmed=!1,t.forEach(function(t){e.confirm==t?e.confirmed=!0:e.confirmed=!1})}}],link:function(e,t,r){r.$observe("match",function(){e.matches=JSON.parse(r.match),e.doConfirm(e.matches)}),e.$watch("confirm",function(){e.matches=JSON.parse(r.match),e.doConfirm(e.matches)})}}}),angular.module("authServices",[]).factory("Auth",["$http","AuthToken",function(e,t){var r={};return r.getUser=function(){if(t.getToken())return e.post("/api/me");$q.reject({message:"User has no token"})},r.login=function(r){return e.post("/api/authenticate",r).then(function(e){return console.log(e),t.setToken(e.data.token),e})},r.isLoggedIn=function(){return!!t.getToken()},r.logout=function(){t.setToken()},r}]).factory("AuthToken",["$window",function(e){var t={};return t.setToken=function(t){t?e.localStorage.setItem("token",t):e.localStorage.removeItem("token",t)},t.getToken=function(){return e.localStorage.getItem("token")},t}]).factory("AuthInterceptors",["AuthToken",function(e){var t={};return t.request=function(t){var r=e.getToken();return r&&(t.headers["x-access-token"]=r),t},t}]),angular.module("userServices",[]).factory("User",["$http",function(e){return userFactory={},userFactory.getPermission=function(){return e.get("/api/permission")},userFactory.create=function(t){return e.post("/api/users",t)},userFactory.activeAccount=function(t){return e.put("/api/activate/"+t)},userFactory.checkCredentials=function(t){return e.post("/api/resend",t)},userFactory.resendLink=function(t){return e.put("/api/resend",t)},userFactory.sendUsername=function(t){return e.get("/api/resetusername/"+t)},userFactory.sendPassword=function(t){return e.put("/api/resetpassword",t)},userFactory.resetPassword=function(t){return e.get("/api/resetpassword/"+t)},userFactory.savePassword=function(t){return e.put("/api/savepassword",t)},userFactory.renewSession=function(t){return e.get("/api/renewToken/"+t)},userFactory}]),angular.module("mainControllers",["authServices","userServices"]).controller("mainCtrl",["Auth","$timeout","$location","$state","$rootScope","$scope","$window","$interval","User","AuthToken",function(e,t,r,s,a,o,n,i,c,l){var u=this;u.loadme=!1,o.$on("LOAD",function(){o.loading=!0}),o.$on("UNLOAD",function(){o.loading=!1}),a.$on("$stateChangeStart",function(){d?e.isLoggedIn()?(u.isLoggedIn=!0,u.loadme=!0,e.getUser().then(function(e){u.user=e.data,u.loadme=!0,c.getPermission().then(function(e){e.data.success?"admin"===e.data.permission?(u.authorized=!0,u.loadme=!0):"artist"===e.data.permission?(u.permission=!0,u.loadme=!0):(u.permission=!1,u.authorized=!1,u.loadme=!0):(u.permission=!1,u.authorized=!1,u.loadme=!0)})})):(u.user=!1,u.isLoggedIn=!1,u.loadme=!0):d()});var d=function(){if(e.isLoggedIn()){u.checkSession=!0;var t=i(function(){var e=n.localStorage.getItem("token");if(null===e)i.cancel(t);else{self.parseJwt=function(e){var t=e.split(".")[1],r=t.replace("-","+").replace("_","/");return JSON.parse(n.atob(r))};var r=self.parseJwt(e),s=Math.floor(Date.now()/1e3);r.exp-s<=5&&(g("expired"),i.cancel(t))}},2e3)}};d(),u.renewSession=function(){u.choiceMade=!0,c.renewSession(u.user.username).then(function(e){e.data.success?(l.setToken(e.data.token),d(),p("expired")):(u.ModalBody=e.data.message,p("expired"))})},u.endSession=function(){u.choiceMade=!0,p("expired"),t(function(){g("logout")},500)};var g=function(r){u.choiceMade=!1,u.modalHeader=void 0,u.modalBody=void 0,u.hideButton=!1,"expired"===r?(u.modalHeader="Timeout Warning",u.modalBody="Your session will expired in 5 minutes. Would you like to renew your session?",$("#myModal").modal({backdrop:"static"})):"logout"===r?(u.hideButton=!0,u.modalHeader="로그아웃",$("#myModal").modal({backdrop:"static"}),t(function(){e.logout(),u.isLoggedIn=!1,p("logout"),s.reload()},1e3)):"login"===r&&$("#login").modal({backdrop:"static"}),t(function(){u.choiceMade||p("logout")},2e3)},p=function(e){"expired"===e?$("#myModal").modal("hide"):"logout"===e?$("#myModal").modal("hide"):"login"===e&&$("#login").modal("hide")};this.doLogin=function(r,a){u.errorMsg=!1,u.expired=!1,u.disabled=!0,a?e.login(u.loginData).then(function(e){e.data.success?(u.disabled=!0,u.successMsg=e.data.message,t(function(){p("login"),u.loginData=null,u.isLoggedIn=!0,d(),s.reload()},1e3)):e.data.expired?(u.expired=!0,u.disabled=!0,u.errorMsg=e.data.message):(u.disabled=!1,u.errorMsg=e.data.message)}):(u.disabled=!1,u.loading=!1,u.errorMsg="올바른 정보를 입력해주세요.")},u.login=function(){u.successMsg=!1,u.errorMsg=!1,u.disabled=!1,g("login")},u.logout=function(){g("logout")},u.resend=function(){p("login"),t(function(){s.go("resend"),u.expired=!1},500)},u.resetusername=function(){p("login"),t(function(){s.go("resetusername")},500)},u.resetpassword=function(){p("login"),t(function(){s.go("resetpassword")},500)}}]),angular.module("app").controller("mainMenuController",["$http","$scope",function(e,t){e.get("/api/header").then(function(e){t.headers=e.data})}]),angular.module("emailControllers",["userServices"]).controller("emailCtrl",["$stateParams","User","$timeout","$state",function(e,t,r,s){var a=this;t.activeAccount(e.token).then(function(e){a.successMsg=!1,a.errorMsg=!1,e.data.success?(a.disabled=!0,a.successMsg=e.data.message+"...메인 페이지로 이동합니다.",r(function(){s.go("app")},2e3)):(a.errorMsg=e.data.message+"...메인 페이지로 이동합니다.",r(function(){s.go("app")},2e3))})}]).controller("resendCtrl",["User","$timeout","$state",function(e,t,r){app=this,this.checkCredentials=function(s){app.successMsg=!1,app.errorMsg=!1,app.disabled=!0,e.checkCredentials(this.loginData).then(function(s){s.data.success?e.resendLink(app.loginData).then(function(e){e.data.success&&(app.disabled=!0,app.successMsg=e.data.message+"...메인 페이지로 이동합니다.",t(function(){r.go("app")},2e3))}):(app.disabled=!1,app.errorMsg=s.data.message)})}}]).controller("usernameCtrl",["User","$timeout","$state",function(e,t,r){var s=this;this.sendUsername=function(a,o){s.errorMsg=!1,s.disabled=!0,o?e.sendUsername(s.userData.email).then(function(e){e.data.success?(s.successMsg=e.data.message+"...메인 페이지로 이동합니다.",t(function(){r.go("app")},2e3)):(s.disabled=!1,s.errorMsg=e.data.message)}):(s.disabled=!1,s.errorMsg="올바른 이메일 주소가 아닙니다.")}}]).controller("passwordCtrl",["User","$timeout","$state",function(e,t,r){var s=this;s.sendPassword=function(a,o){s.errorMsg=!1,s.disabled=!0,o?e.sendPassword(s.resetData).then(function(e){e.data.success?(s.successMsg=e.data.message+"...메인 페이지로 이동합니다.",t(function(){r.go("app")},2e3)):(s.disabled=!1,s.errorMsg=e.data.message)}):(s.disabled=!1,s.errorMsg="올바른 아이디가 아닙니다.")}}]).controller("resetCtrl",["$stateParams","$scope","User","$timeout","$state",function(e,t,r,s,a){var o=this;o.hide=!0,r.resetPassword(e.token).then(function(e){e.data.success?(o.hide=!1,t.alert="alert alert-success",o.successMsg="새로운 비밀번호를 입력해주세요.",t.username=e.data.user[0].username):(t.alert="alert alert-danger",o.errorMsg=e.data.message)}),o.savePassword=function(e,n,i){o.errorMsg=!1,o.successMsg=!1,o.disabled=!0,o.loading=!0,n&&i?(o.regData.username=t.username,r.savePassword(o.regData).then(function(e){o.loading=!1,e.data.success?(t.alert="alert alert-success",o.successMsg=e.data.message+"...메인 화면으로 이동합니다.",s(function(){a.go("app")},2e3)):(t.alert="alert alert-danger",o.disabled=!1,o.errorMsg=e.data.message)})):(t.alert="alert alert-danger",o.loading=!1,o.disabled=!1,o.errorMsg="올바른 정보를 입력해주세요.")}}]),angular.module("userControllers",["userServices"]).controller("regCtrl",["$http","$location","$timeout","User","Auth","$state",function(e,t,r,s,a,o){var n=this;this.regStep1=function(e){n.errorMsg=!1,e?e.terms&&e.privacy?(n.successMsg="약관에 성공적으로 동의하셨습니다.",n.disabled=!0,o.go("registerStep2")):(n.errorMsg="약관에 동의해야만 회원가입을 진행할 수 있습니다.",n.disabled=!1):n.errorMsg="약관에 동의해야만 회원가입을 진행할 수 있습니다."},this.regStep2=function(e,t,i){n.errorMsg=!1,n.disabled=!0,t&&i?s.create(n.regData).then(function(e){e.data.success?(n.disabled=!0,n.successMsg=e.data.message,a.login(n.regData).then(function(e){e.data.success?(n.disabled=!0,n.successMsg=e.data.message,r(function(){o.go("app")},1e3)):e.data.expired?(n.expired=!0,n.disabled=!0,n.errorMsg=e.data.message):(n.disabled=!1,n.errorMsg=e.data.message)})):(n.disabled=!1,n.errorMsg=e.data.message)}):(n.disabled=!1,n.loading=!1,n.errorMsg="올바른 정보를 입력해주세요.")}}]);
//# sourceMappingURL=data:application/json;charset=utf8;base64,
